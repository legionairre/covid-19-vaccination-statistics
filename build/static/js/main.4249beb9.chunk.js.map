{"version":3,"sources":["CustomBarChart.js","App.js","reportWebVitals.js","index.js"],"names":["ctx","blues","CustomBarChart","data","yKey","xKey","maxTextWidth","useMemo","reduce","acc","cur","text","value","width","toLocaleString","document","createElement","getContext","font","measureText","height","length","debounce","layout","margin","left","right","hide","axisLine","type","yAxisId","dataKey","tickLine","tick","orientation","tickFormatter","mirror","transform","minPointSize","barSize","map","d","idx","fill","index","App","useState","countries","setCountries","useEffect","axios","get","then","res","tempCountries","Object","values","forEach","country","total_vaccinations","push","location","sort","a","b","className","Date","toDateString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4249beb9.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Cell,\n  Text\n} from \"recharts\";\n\nimport \"./index.css\";\n\nconst blues = [\n  [ \"#457AA6\" ],\n  [ \"#457AA6\", \"#E3EBF2\" ],\n  [ \"#264F73\", \"#457AA6\", \"#E3EBF2\" ],\n  [ \"#264F73\", \"#457AA6\", \"#A2BBD2\", \"#E3EBF2\" ],\n  [ \"#1A334A\", \"#264F73\", \"#457AA6\", \"#A2BBD2\", \"#E3EBF2\" ]\n];\n\nconst getColor = (length, index) => {\n  if ( length <= blues.length ) {\n    return blues[length - 1][index];\n  }\n\n  return blues[blues.length - 1][index % blues.length];\n};\n\nconst YAxisLeftTick = ({ y, payload: { value } }) => {\n  return (\n    <Text x={0} y={y} textAnchor=\"start\" verticalAnchor=\"middle\">\n      {value}\n    </Text>\n  );\n};\n\nlet ctx;\n\nexport const measureText14HelveticaNeue = text => {\n  if ( !ctx ) {\n    ctx = document.createElement(\"canvas\").getContext(\"2d\");\n    ctx.font = \"14px 'Helvetica Neue\";\n  }\n\n  return ctx.measureText(text).width;\n};\n\nconst BAR_AXIS_SPACE = 20;\n\nexport const CustomBarChart = ({ data, yKey, xKey }) => {\n\n  const maxTextWidth = useMemo(\n    () =>\n      data.reduce((acc, cur) => {\n        const value = cur[yKey];\n        const width = measureText14HelveticaNeue(value.toLocaleString());\n        if ( width > acc ) {\n          return width;\n        }\n        return acc;\n      }, 0),\n    [ data, yKey ]\n  );\n\n  return (\n    <ResponsiveContainer width={\"100%\"} height={50 * data.length} debounce={50}>\n      <BarChart\n        data={data}\n        layout=\"vertical\"\n        margin={{ left: maxTextWidth - 30, right: maxTextWidth + (BAR_AXIS_SPACE) }}\n      >\n        <XAxis hide axisLine={false} type=\"number\"/>\n        <YAxis\n          yAxisId={0}\n          dataKey={xKey}\n          type=\"category\"\n          axisLine={false}\n          tickLine={false}\n          tick={true}\n        />\n        <YAxis\n          orientation=\"right\"\n          yAxisId={1}\n          dataKey={yKey}\n          type=\"category\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={value => value.toLocaleString()}\n          mirror\n          tick={{\n            transform: `translate(${maxTextWidth + BAR_AXIS_SPACE}, 0)`\n          }}\n        />\n        <Bar dataKey={yKey} minPointSize={2} barSize={32}>\n          {data.map((d, idx) => {\n            return <Cell key={d[xKey]} fill={getColor(data.length, idx)}/>;\n          })}\n        </Bar>\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport axios from \"axios\";\nimport { CustomBarChart } from \"./CustomBarChart\";\n\nconst App = () => {\n\n  const [ countries, setCountries ] = useState([]);\n\n  useEffect(() => {\n    axios.get(`https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/latest/owid-covid-latest.json`)\n      .then(res => {\n        const { data } = res;\n        const tempCountries = [];\n\n        Object.values(data).forEach(country => {\n          if ( country.total_vaccinations )\n            tempCountries.push({\n              location: country.location,\n              total_vaccinations: country.total_vaccinations\n            })\n        })\n\n        tempCountries.sort(\n          (a,b) => (a.total_vaccinations > b.total_vaccinations) ? -1 :\n            ((b.total_vaccinations > a.total_vaccinations) ? 1 : 0));\n\n        setCountries(tempCountries);\n      })\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <p className={'header'}>COVID-19 VACCINATION STATISTICS</p>\n      <p className={'header'}>{new Date().toDateString()}</p>\n      {countries ? <CustomBarChart data={countries} xKey=\"location\" yKey=\"total_vaccinations\"/> : null}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}